#version 460 core
#define CASCADE_COUNT 4
#define INVOCATION_SIZE 256

struct indirect_command_t {
    uint count;
    uint instance_count;
    uint first_index;
    int base_vertex;
    uint base_instance;
};

struct aabb_t {
    vec4 min;
    vec4 max;
    vec4 center;
    vec4 extent;
};

struct object_info_t {
    uint local_transform;
    uint global_transform;
    uint diffuse_texture;
    uint normal_texture;
    uint specular_texture;
    uint group_index;
    uint group_offset;

    vec4 scale;
    vec4 sphere; // w is radius
    aabb_t aabb;
    indirect_command_t command;
};

struct object_index_shift_t {
    uint object_id;
};

struct cascade_data_t {
    mat4 projection;
    mat4 view;
    mat4 pv;
    mat4 global;
    vec4 scale;
    vec4 offset; // w is split
};

layout (local_size_x = INVOCATION_SIZE, local_size_y = 1, local_size_z = 1) in;

layout (location = 0) uniform uint u_draw_count;
layout (location = 1) uniform uint u_object_count;
layout (location = 2) uniform uint u_disable_frustum_culling;
layout (location = 3) uniform uint u_disable_near_culling;
layout (location = 4) uniform uint u_cascade_layer;

layout (std430, binding = 0) readonly restrict buffer b_frustum {
    // xyz => normal
    // w => distance
    vec4[6] planes;
} frustum;

layout (std430, binding = 1) readonly restrict buffer b_local_transform {
    mat4[] local_transforms;
};

layout (std430, binding = 2) readonly restrict buffer b_global_transform {
    mat4[] global_transforms;
};

layout (std430, binding = 3) readonly restrict buffer b_object_info {
    object_info_t[] objects;
};

layout (std430, binding = 4) writeonly restrict buffer b_indirect_commands {
    indirect_command_t[] indirect_commands;
};

layout (std430, binding = 5) restrict buffer b_draw_count {
    uint[] draw_count;
};

layout (std430, binding = 6) writeonly restrict buffer b_object_index_shift {
    object_index_shift_t[] object_shift;
};

layout (std430, binding = 7) readonly restrict buffer b_cascade_data {
    cascade_data_t[CASCADE_COUNT] cascades;
};

layout (std140, binding = 8) uniform u_camera {
    mat4 inf_projection;
    mat4 projection;
    mat4 view;
    mat4 pv;
    vec3 position;
    float near;
    float far;
} camera;

layout (std430, binding = 9) writeonly restrict buffer b_roc_indirect_command {
    uint count;
    uint instance_count;
    uint first;
    uint base_instance;
} roc_command;

layout (std430, binding = 10) restrict buffer b_roc_object_shift {
    object_index_shift_t[] roc_object_shift;
};

bool is_aabb_inside_plane(in aabb_t aabb, in vec4 plane) {
    const vec3 normal = plane.xyz;
    const vec3 extent = aabb.extent.xyz;
    const vec3 center = aabb.center.xyz;
    const float radius = dot(extent, abs(normal));
    return -radius <= (dot(normal, center) - plane.w);
}

bool is_object_visible(in aabb_t aabb, in mat4 model) {
    const vec3 world_aabb_min = vec3(model * vec4(aabb.min.xyz, 1.0));
    const vec3 world_aabb_max = vec3(model * vec4(aabb.max.xyz, 1.0));
    const vec3 world_aabb_center = vec3(model * vec4(aabb.center.xyz, 1.0));
    const vec3 right = vec3(model[0]) * aabb.extent.x;
    const vec3 up = vec3(model[1]) * aabb.extent.y;
    const vec3 forward = vec3(-model[2]) * aabb.extent.z;

    const vec3 world_extent = vec3(
        abs(dot(vec3(1, 0, 0), right)) +
        abs(dot(vec3(1, 0, 0), up)) +
        abs(dot(vec3(1, 0, 0), forward)),
        abs(dot(vec3(0, 1, 0), right)) +
        abs(dot(vec3(0, 1, 0), up)) +
        abs(dot(vec3(0, 1, 0), forward)),
        abs(dot(vec3(0, 0, 1), right)) +
        abs(dot(vec3(0, 0, 1), up)) +
        abs(dot(vec3(0, 0, 1), forward)));

    const aabb_t world_aabb = aabb_t(
        vec4(world_aabb_min, 1.0),
        vec4(world_aabb_max, 1.0),
        vec4(world_aabb_center, 1.0),
        vec4(world_extent, 1.0));
    const uint planes = bool(u_disable_near_culling) ? 5 : 6;
    for (uint i = 0; i < planes; ++i) {
        if (!is_aabb_inside_plane(world_aabb, frustum.planes[i])) {
            return false;
        }
    }

    return true;
}

void main() {
    const uint index = gl_GlobalInvocationID.x;
    if (index < u_object_count) {
        const object_info_t object = objects[index];
        const mat4 local_transform = local_transforms[object.local_transform];
        const mat4 global_transform = global_transforms[object.global_transform];
        const mat4 model = global_transform * local_transform;

        const bool pass_frustum_cull = bool(u_disable_frustum_culling) || is_object_visible(object.aabb, model);
        if (pass_frustum_cull) {
            // slot translates to gl_DrawID
            const uint slot = atomicAdd(draw_count[object.group_index], 1);
            indirect_commands[slot + object.group_offset] = object.command;
            object_shift[slot + object.group_offset].object_id = index;

            if (u_cascade_layer == -1) {
                // roc
                const uint roc_slot = atomicAdd(roc_command.instance_count, 1);
                roc_object_shift[roc_slot].object_id = index;
            }
        }
    }
}
