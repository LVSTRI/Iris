#version 460 core

struct indirect_command_t {
    uint count;
    uint instance_count;
    uint first_index;
    int base_vertex;
    uint base_instance;
};

struct aabb_t {
    vec4 min;
    vec4 max;
    vec4 center;
    vec4 extent;
};

struct object_info_t {
    uint local_transform;
    uint global_transform;
    uint diffuse_texture;
    uint normal_texture;
    uint specular_texture;
    uint group_index;
    uint group_offset;

    vec4 scale;
    vec4 sphere; // w is radius
    aabb_t aabb;
    indirect_command_t command;
};

struct object_index_shift_t {
    uint object_id;
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout (location = 0) uniform uint u_object_count;

layout (std430, binding = 0) readonly restrict buffer b_object_info {
    object_info_t[] objects;
};

layout (std430, binding = 1) readonly restrict buffer b_roc_visibility {
    uint[] visibility;
};

layout (std430, binding = 2) writeonly restrict buffer b_indirect_commands {
    indirect_command_t[] indirect_commands;
};

layout (std430, binding = 3) restrict buffer b_draw_count {
    uint[] draw_count;
};

layout (std430, binding = 4) writeonly restrict buffer b_object_index_shift {
    object_index_shift_t[] object_shift;
};

void main() {
    const uint index = gl_GlobalInvocationID.x;
    if (index < u_object_count) {
        const object_info_t object = objects[index];
        if (visibility[index] == 1) {
            const uint slot = atomicAdd(draw_count[object.group_index], 1);
            indirect_commands[object.group_offset + slot] = object.command;
            object_shift[object.group_offset + slot].object_id = index;
        }
    }
}
